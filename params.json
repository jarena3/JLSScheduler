{"name":"JLS Homework Utility","tagline":"Automatic homework and handout generator for JLS LS-level classes","body":"[Jump to Tutorial](#howto)\r\n\r\n#Overview\r\n\r\nThe JLS Homework Utility / JLS Scheduler is a tool that automates the creation of useful handouts for JLS LS-level classes. You input class and student information (including Korean names, which can be parsed from lpt.gojls excel files, see [Importing JLS Excel Data](#jls-excel)), and you get these printable (.DOCX, .DOC, .PDF, .XLS, .HTML, or .ODT) files:  \r\n+ A class syllabus, student list, and homework tracker for yourself\r\n+ A homework list for the class' KT\r\n+ Personalized homework sheets for each student, with...\r\n+ A syllabus for Mom and Dad, complete with Korean introduction\r\n\r\nThe tool allows for saving and loading of specialty .JLSC files to save class data to work on later, or send to other teachers. It allows for the [addition of custom classes](#json-edit), automatically detects Korean national holidays and JLS breaks and adjusts the homework schedule to account for them, and allows for any amount and configuration of singular and repeating homework assignments.  \r\n\r\n###Please note\r\nThis tool, while developed with older systems in mind, will just not be able to run on really old OSes. This being Korea, some of the machines here (in my branch, at least) run 14-year-old operating systems. If you *do* get this program to run on one of these, I can't guarantee everything will work. The recommended specifications are:  \r\n+ Windows 7 or 8\r\n+ Microsoft Word 2013 (if you want to export to formats other than .DOCX)  \r\n    *Exporting to .DOC (not .DOCX) files will still require MS Word to be installed on the system, but any version should be okay.*\r\n\r\nI have no idea what minimum specifications are. If you can get it to run, you're probably good to produce at least .DOCXes.\r\n\r\n<a name=\"howto\"></a>\r\n#How-to\r\n\r\nStuff here\r\n\r\n<a name=\"jls-excel\"></a>\r\n\r\n\r\n<a name=\"json-edit\"></a>\r\n#Adding Custom Class Levels and Times\r\n\r\nThis is all done in JSON, so if you're familiar with it you should need no instruction.\r\nOtherwise, this is how you extend the utility:\r\n\r\n\r\n## Adding a new Time  \r\nIn the JLS Homework Utility folder, there is a folder called **Resources**. Open it, and inside you'll find a text file called **ClassTimes.txt** open that.  \r\nInside this file, simply add a new line surrounded in quotes to describe your new time. If you're adding the time to the beginning or middle of the list, you'll need to end it with a comma, like this:   \r\n`    \"1:00-2:00\",  `  \r\nBut, if you're adding a new time to the end of the list, don't include the comma, like this:  \r\n`    \"9:00-10:00\"  `  \r\nAdd a comma to the previous entry. All entries but the last *must* end with a comma, or the program will fail to understand the data.\r\nSave the file and open the Homework Utility program. Your new time should appear in the drop-down list.\r\n\r\n\r\n## Adding or Editing Holidays\r\nIn the JLS Homework Utility folder, there is a folder called **Resources**. Open it, and inside you'll find text files called **JLSHolidays.txt** and **KRHolidays.txt**. Open either, but know that the Homework Utility [already contains a method for adding custom holidays to a class schedule](#addholiday). Edit these to change or add holidays *globally*.\r\n\r\n\r\nInside this file, add a new line in the following format:   \r\n`    \"D/MM/YYYY\": \"My Custom Holiday\",`   \r\n\r\nEnsure that all entries **except for** the final one end with a comma. Failure to do this will result in the program being unable to understand the data.\r\n\r\nSave the file and open the Homework Utility program. Your new holiday should automatically apply to every schedule you generate from now on.\r\n\r\n\r\n## Adding a new Class Level\r\nIn the JLS Homework Utility folder, there is a folder called **Resources**. Open it, and inside you'll find a text file called **ClassLevels.txt** open that.  \r\nInside this file, simply add a new line surrounded in quotes to describe the new class. If you're adding the class to the beginning or middle of the list, you'll need to end it with a comma, like this:    \r\n`    \"My New Class\",  `  \r\nBut, if you're adding a new class to the end of the list, don't include the comma, like this:   \r\n`    \"My New Class\"  `  \r\nAdd a comma to the previous entry. All entries but the last *must* end with a comma, or the program will fail to understand the data.\r\nSave the file and return to the **Resources** folder.  \r\n\r\nIf you **will not use** the [automatic Speaking Tree homework generation options](*sthomeworkoptions) for this class, you can use the program normally, just know that if you try to use those options with this new class, schedule generation will fail. Otherwise, you'll have to add a class book, as described below:\r\n\r\n\r\n## Adding a new Book\r\nIn the **Resources** folder, the **Books.txt** file contains book data, and the syntax is as follows:  \r\n`    {`  \r\n`        \"Title\": \"My Class Name (must be the same as the entry in ClassLevels.txt\",`  \r\n`        \"Units\": {`  \r\n`            \"1\": \"Unit 1 Title\",`  \r\n`            \"2\": \"Unit 2 Title\",`  \r\n`            \"3\": \"Unit 3 Title\",`  \r\n`            \"4\": \"Unit 4 Title\",`  \r\n`            \"5\": \"Unit 5 Title\",`  \r\n`            \"6\": \"Unit 6 Title\",`  \r\n`            \"7\": \"Unit 7 Title\",`  \r\n`            \"8\": \"Unit 8 Title\"`  \r\n`        }`  \r\n`    },`  \r\n\r\nOnce again, every entry must terminate in a comma except for the final entry.\r\nAfter adding the book for your new class, the program should be able to generate automatic homework lists for your class. \r\n\r\n#Bugs\r\n\r\nStuff here","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}